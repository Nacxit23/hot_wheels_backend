type Person {
    id: ID! @globalId
    genre: String!
    dateBirth: Date! @rename(attribute:"date_birth")
    city: String!
    firstName: String! @rename(attribute:"first_name")
    identification: String!
    lastName: String! @rename(attribute:"last_name")
    users: [User!]! @hasMany(type: "connection")
    name: String!
}

input CreatePerson {
    genre: String! @rules(apply:["max:1"],messages:{max:"El género solo puede tener un carácter."})
    dateBirth: Date!
    firstName: String!
    identification: String! @rules(apply:["unique:persons,identification"], messages: {unique:"La identificación tiene que ser única."})
    lastName: String!
    city: String!
}

input UpdatePerson {
    id: ID!
    genre: String @rules(apply:["max:1"],messages:{max:"El género solo puede tener un carácter."})
    dateBirth: Date
    firstName: String
    identification: String
    lastName: String
    city: String
}
extend type Query {
    persons: [Person!]! @field(resolver: "App\\GraphQL\\Queries\\Person\\PersonQuery@__invoke")
}

extend type Mutation {
    createPerson(input: CreatePerson!): Person @field(resolver:"App\\GraphQL\\Mutations\\Person\\addPerson@__invoke")
    updatePerson(input: UpdatePerson): Person @field(resolver:"App\\GraphQL\\Mutations\\Person\\UpdatePerson@__invoke")
}
